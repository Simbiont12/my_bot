from http.server import BaseHTTPRequestHandler
import json
import requests
import re
from datetime import datetime
import os
from urllib.parse import urlparse, parse_qs

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8210361140:AAHMafEoPS4ugu2spU6Ut4CTzrVgzhVxuJQ')
CHAT_IDS = os.environ.get('CHAT_ID', '5308270090,533483177,1513163562').split(',')

def format_students_table(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–∞—Å–∏–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è Telegram"""
    students = []
    group = None
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    clean_text = text.replace('–ò—Ç–æ–≥–∏ –¥–Ω—è', '').replace('0:27', '').strip()
    words = clean_text.split()
    
    i = 0
    while i < len(words):
        # –ò—â–µ–º –≥—Ä—É–ø–ø—É
        if group is None and '-' in words[i] and any(char.isdigit() for char in words[i]):
            group = words[i]
            i += 1
            continue
            
        # –ò—â–µ–º –§–ò–û (—Ç—Ä–∏ —Å–ª–æ–≤–∞ —Å –∑–∞–≥–ª–∞–≤–Ω—ã—Ö)
        if (i + 2 < len(words) and 
            words[i][0].isupper() and 
            words[i+1][0].isupper() and 
            words[i+2][0].isupper()):
            
            name = f"{words[i]} {words[i+1]} {words[i+2]}"
            status = "–ü—Ä–∏—à—ë–ª"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ò—â–µ–º —Å—Ç–∞—Ç—É—Å
            if i + 3 < len(words) and words[i+3] in ['–ë–æ–ª–µ–µ—Ç', '–ü—Ä–æ–≥—É–ª', '–ê–∫–∞–¥–µ–º', '–ò–ì', '–ó–∞—è–≤–ª–µ–Ω–∏–µ', '–ü—Ä–∏—à—ë–ª']:
                status = words[i+3]
                i += 4
            else:
                i += 3
                
            students.append({"name": name, "status": status})
        else:
            i += 1
    
    if not students:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    result = "üéì <b>–û–¢–ß–ï–¢ –û –ü–û–°–ï–©–ê–ï–ú–û–°–¢–ò</b>\n\n"
    
    if group:
        result += f"üè´ <b>–ì—Ä—É–ø–ø–∞:</b> <code>{group}</code>\n\n"
    
    result += "<code>"
    for idx, student in enumerate(students, 1):
        result += f"{idx:2}. {student['name']} - {student['status']}\n"
    result += "</code>"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(students)
    present = len([s for s in students if s['status'] == '–ü—Ä–∏—à—ë–ª'])
    absent = total - present
    
    result += f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    result += f"‚Ä¢ –í—Å–µ–≥–æ: {total}\n"
    result += f"‚Ä¢ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {present}\n"
    result += f"‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {absent}\n"
    
    result += f"\nüïê <i>{datetime.now().strftime('%d.%m.%Y %H:%M')}</i>"
    
    return result

def send_to_telegram(message_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ API –±–æ—Ç–∞"""
    success_count = 0
    
    for chat_id in CHAT_IDS:
        chat_id = chat_id.strip()
        if not chat_id:
            continue
            
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        payload = {
            "chat_id": chat_id,
            "text": message_text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç {chat_id}...")
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
                success_count += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –¥–ª—è {chat_id}: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat_id}: {e}")
    
    return success_count > 0

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            parsed_path = urlparse(self.path)
            
            if parsed_path.path == '/process_form' or parsed_path.path.startswith('/process_form'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
                params = parse_qs(parsed_path.query)
                text = params.get('text', [''])[0]
                
                if not text:
                    self.send_json_response(400, {"error": "No text provided"})
                    return
                
                print(f"üì® –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {text[:100]}...")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                formatted_message = format_students_table(text)
                print(f"üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {formatted_message[:100]}...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                success = send_to_telegram(formatted_message)
                
                if success:
                    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    self.send_json_response(200, {
                        "status": "success", 
                        "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram",
                        "chats_count": len(CHAT_IDS)
                    })
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç")
                    self.send_json_response(500, {
                        "error": "Failed to send message to any chat",
                        "chats_tried": len(CHAT_IDS)
                    })
                    
            else:
                # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                self.send_html_response("""
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Telegram Form Processor</title>
                    <meta charset="utf-8">
                    <style>
                        body { font-family: Arial, sans-serif; max-width: 800px; margin: 40px auto; padding: 20px; }
                        code { background: #f4f4f4; padding: 10px; display: block; margin: 10px 0; }
                        .success { color: green; }
                        .error { color: red; }
                    </style>
                </head>
                <body>
                    <h1>ü§ñ Telegram Form Processor</h1>
                    <p>–°–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram</p>
                    
                    <h2>üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</h2>
                    <p>GET –∑–∞–ø—Ä–æ—Å:</p>
                    <code>https://my-pair136pq-sims-projects-10ecc07f.vercel.app/process_form?text=–í–∞—à–∏_–¥–∞–Ω–Ω—ã–µ</code>
                    
                    <h2>üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</h2>
                    <ul>
                        <li>–ë–æ—Ç: <code>{}</code></li>
                        <li>–ß–∞—Ç—ã: <code>{}</code></li>
                    </ul>
                    
                    <h2>‚úÖ –°—Ç–∞—Ç—É—Å: –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç</h2>
                    <p>–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ Telegram —á–∞—Ç—ã</p>
                </body>
                </html>
                """.format(BOT_TOKEN[:10] + '...' if BOT_TOKEN else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 
                          len(CHAT_IDS)))
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ do_GET: {e}")
            self.send_json_response(500, {"error": str(e)})
    
    def do_POST(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            if self.path == '/process_form':
                content_length = int(self.headers.get('Content-Length', 0))
                if content_length > 0:
                    body = self.rfile.read(content_length).decode('utf-8')
                    
                    if self.headers.get('Content-Type') == 'application/json':
                        data = json.loads(body)
                        text = data.get('text', '')
                    else:
                        data = parse_qs(body)
                        text = data.get('text', [''])[0]
                else:
                    text = ''
                
                if not text:
                    self.send_json_response(400, {"error": "No text provided"})
                    return
                
                print(f"üì® –ü–æ–ª—É—á–µ–Ω POST —Ç–µ–∫—Å—Ç: {text[:100]}...")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                formatted_message = format_students_table(text)
                success = send_to_telegram(formatted_message)
                
                if success:
                    self.send_json_response(200, {"status": "success"})
                else:
                    self.send_json_response(500, {"error": "Failed to send message"})
                    
            else:
                self.send_error(404)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ do_POST: {e}")
            self.send_json_response(500, {"error": str(e)})
    
    def send_json_response(self, status_code, data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON –æ—Ç–≤–µ—Ç"""
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False).encode())
    
    def send_html_response(self, html_content):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML –æ—Ç–≤–µ—Ç"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(html_content.encode())

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == '__main__':
    from http.server import HTTPServer
    print("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    server = HTTPServer(('localhost', 8000), handler)
    server.serve_forever()
    #1
