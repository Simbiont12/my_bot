from flask import Flask, request, jsonify
import requests
import logging
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('webhook_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TG_BOT_TOKEN = "7794541820:AAHYZZn5Wo1ISS4pQe-kC5AuEOhDRJnGzbg"
TG_CHAT_ID = "5308270090"

# ====== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø ======

def format_students_list(students_text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —ç–º–æ–¥–∑–∏"""
    if not students_text:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö"
    
    lines = students_text.strip().split('\n')
    formatted_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
        if '–ë–æ–ª–µ–µ—Ç' in line:
            icon = "ü§í"  # –ë–æ–ª–µ–µ—Ç
        elif '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' in line:
            icon = "‚ùå"  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        elif '–û–ø–æ–∑–¥–∞–ª' in line:
            icon = "‚è∞"  # –û–ø–æ–∑–¥–∞–ª
        else:
            icon = "‚úÖ"  # –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            
        formatted_lines.append(f"{icon} {line}")
    
    return '\n'.join(formatted_lines)

def create_beautiful_message(form_data):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã"""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    group = form_data.get('group', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    date = form_data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    students_text = form_data.get('students', '')
    additional_info = form_data.get('additional_info', '')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    try:
        if date and date != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
            date_obj = datetime.fromisoformat(date.replace('Z', '+00:00'))
            formatted_date = date_obj.strftime('%d.%m.%Y')
            weekday = date_obj.strftime('%A')
            # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            weekdays_ru = {
                'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
                'Wednesday': '–°—Ä–µ–¥–∞', 
                'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                'Saturday': '–°—É–±–±–æ—Ç–∞',
                'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            }
            weekday_ru = weekdays_ru.get(weekday, weekday)
        else:
            formatted_date = datetime.now().strftime('%d.%m.%Y')
            weekday_ru = "–°–µ–≥–æ–¥–Ω—è"
    except:
        formatted_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
        weekday_ru = ""
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìä *–ò–¢–û–ì–ò –î–ù–Ø*\n\n"
    message += f"*–ì—Ä—É–ø–ø–∞:* {group}\n"
    message += f"*–î–∞—Ç–∞:* {formatted_date} ({weekday_ru})\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    message += "üë• *–°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢–û–í:*\n"
    message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    students_formatted = format_students_list(students_text)
    message += f"{students_formatted}\n\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if additional_info:
        message += "üìù *–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:*\n"
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        message += f"{additional_info}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_students = len([line for line in students_text.split('\n') if line.strip()])
    sick_count = students_text.count('–ë–æ–ª–µ–µ—Ç')
    absent_count = students_text.count('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    late_count = students_text.count('–û–ø–æ–∑–¥–∞–ª')
    present_count = total_students - sick_count - absent_count
    
    message += "üìà *–°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n"
    message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    message += f"‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {present_count}\n"
    message += f"ü§í –ë–æ–ª–µ—é—Ç: {sick_count}\n"
    message += f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {absent_count}\n"
    if late_count > 0:
        message += f"‚è∞ –û–ø–æ–∑–¥–∞–ª–∏: {late_count}\n"
    
    message += f"\n_–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}_"
    
    return message

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TG_BOT_TOKEN}/sendMessage"
    
    payload = {
        'chat_id': TG_CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown',
        'disable_web_page_preview': True
    }
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        response_data = response.json()
        
        if response_data.get('ok'):
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response_data.get('description')}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False

# ====== WEBHOOK –†–û–£–¢–´ ======

@app.route('/', methods=['GET'])
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "status": "success",
        "message": "Webhook server is running!",
        "endpoints": {
            "webhook": "/webhook (POST)",
            "health": "/health (GET)"
        }
    })

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "success",
        "message": "Server is healthy",
        "timestamp": datetime.now().isoformat()
    })

@app.route('/webhook', methods=['POST'])
def webhook_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º"""
    try:
        logger.info("üì® –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        if request.is_json:
            form_data = request.get_json()
        else:
            form_data = request.form.to_dict()
        
        logger.info(f"üìä –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: {json.dumps(form_data, ensure_ascii=False, indent=2)}")
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = create_beautiful_message(form_data)
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        success = send_telegram_message(message)
        
        if success:
            return jsonify({
                "status": "success",
                "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"
            }), 200
        else:
            return jsonify({
                "status": "error", 
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram"
            }), 500
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({
            "status": "error",
            "message": f"Internal server error: {str(e)}"
        }), 500

@app.route('/test', methods=['GET'])
def test_handler():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    test_data = {
        "group": "1-–ò–ö–°–°11-10",
        "date": "2024-10-14T15:56:00Z",
        "students": "–ë–µ–∂–∫–æ –ö—Ä–∏—Å—Ç–∏–Ω–∞ –†–æ–º–∞–Ω–æ–≤–Ω–∞ ‚úÖ\n–í–æ–ª–∫–æ–≤ –ò–≤–∞–Ω –í–∞–¥–∏–º–æ–≤–∏—á ü§í –ë–æ–ª–µ–µ—Ç\n–ì—Ä–∞—á–µ–≤ –î–µ–Ω–∏–∑ –ì–µ—Ä–º–∞–Ω–æ–≤–∏—á ü§í –ë–æ–ª–µ–µ—Ç\n–ì—Ä–µ–Ω–∫–µ –ú–∞–∫—Å–∏–º –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á ü§í –ë–æ–ª–µ–µ—Ç",
        "additional_info": "–í—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–∏–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ"
    }
    
    message = create_beautiful_message(test_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    success = send_telegram_message(message)
    
    return jsonify({
        "status": "success" if success else "error",
        "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        "test_message": message
    })

# ====== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ======
if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(
        host='0.0.0.0',  # –î–æ—Å—Ç—É–ø —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏
        port=5000,
        debug=True  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å False
    )
