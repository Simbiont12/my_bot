from http.server import BaseHTTPRequestHandler
import json
import requests
import re
from datetime import datetime
import os
from urllib.parse import urlparse, parse_qs

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8210361140:AAHMafEoPS4ugu2spU6Ut4CTzrVgzhVxuJQ')
CHAT_IDS = os.environ.get('CHAT_ID', '5308270090,533483177,1513163562').split(',')

def format_students_table(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–∞—Å–∏–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è Telegram"""
    students = []
    group = None
    
    print(f"üîß –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {text[:50]}...")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    clean_text = text.replace('–ò—Ç–æ–≥–∏ –¥–Ω—è', '').replace('0:27', '').strip()
    words = clean_text.split()
    
    i = 0
    while i < len(words):
        # –ò—â–µ–º –≥—Ä—É–ø–ø—É
        if group is None and '-' in words[i] and any(char.isdigit() for char in words[i]):
            group = words[i]
            print(f"üìã –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group}")
            i += 1
            continue
            
        # –ò—â–µ–º –§–ò–û (—Ç—Ä–∏ —Å–ª–æ–≤–∞ —Å –∑–∞–≥–ª–∞–≤–Ω—ã—Ö)
        if (i + 2 < len(words) and 
            words[i][0].isupper() and 
            words[i+1][0].isupper() and 
            words[i+2][0].isupper()):
            
            name = f"{words[i]} {words[i+1]} {words[i+2]}"
            status = "–ü—Ä–∏—à—ë–ª"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ò—â–µ–º —Å—Ç–∞—Ç—É—Å
            if i + 3 < len(words) and words[i+3] in ['–ë–æ–ª–µ–µ—Ç', '–ü—Ä–æ–≥—É–ª', '–ê–∫–∞–¥–µ–º', '–ò–ì', '–ó–∞—è–≤–ª–µ–Ω–∏–µ', '–ü—Ä–∏—à—ë–ª']:
                status = words[i+3]
                i += 4
            else:
                i += 3
                
            students.append({"name": name, "status": status})
            print(f"üë§ –ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {name} - {status}")
        else:
            i += 1
    
    if not students:
        print("‚ùå –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    result = "üéì <b>–û–¢–ß–ï–¢ –û –ü–û–°–ï–©–ê–ï–ú–û–°–¢–ò</b>\n\n"
    
    if group:
        result += f"üè´ <b>–ì—Ä—É–ø–ø–∞:</b> <code>{group}</code>\n\n"
    
    result += "<code>"
    for idx, student in enumerate(students, 1):
        result += f"{idx:2}. {student['name']} - {student['status']}\n"
    result += "</code>"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(students)
    present = len([s for s in students if s['status'] == '–ü—Ä–∏—à—ë–ª'])
    absent = total - present
    
    result += f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    result += f"‚Ä¢ –í—Å–µ–≥–æ: {total}\n"
    result += f"‚Ä¢ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {present}\n"
    result += f"‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {absent}\n"
    
    result += f"\nüïê <i>{datetime.now().strftime('%d.%m.%Y %H:%M')}</i>"
    
    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: {total} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
    return result

def send_to_telegram(message_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ API –±–æ—Ç–∞"""
    print(f"üì§ –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram...")
    print(f"üîë BOT_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–ù–ï–¢'}")
    print(f"üí¨ CHAT_IDS: {CHAT_IDS}")
    
    success_count = 0
    
    for chat_id in CHAT_IDS:
        chat_id = chat_id.strip()
        if not chat_id:
            continue
            
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        payload = {
            "chat_id": chat_id,
            "text": message_text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç {chat_id}...")
            response = requests.post(url, json=payload, timeout=10)
            print(f"üì§ –û—Ç–≤–µ—Ç Telegram: {response.status_code}")
            
            if response.status_code == 200:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
                success_count += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –¥–ª—è {chat_id}: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat_id}: {e}")
    
    print(f"üìä –ò—Ç–æ–≥: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {success_count} –∏–∑ {len(CHAT_IDS)} —á–∞—Ç–æ–≤")
    return success_count > 0

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET –∑–∞–ø—Ä–æ—Å—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            print(f"üìç GET –∑–∞–ø—Ä–æ—Å: {self.path}")
            
            parsed_path = urlparse(self.path)
            
            if parsed_path.path == '/process_form' or parsed_path.path.startswith('/process_form'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
                params = parse_qs(parsed_path.query)
                text = params.get('text', [''])[0]
                
                if not text:
                    print("‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
                    return self.send_json_response(400, {"error": "No text provided"})
                
                print(f"üì® –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {text[:100]}...")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                formatted_message = format_students_table(text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                success = send_to_telegram(formatted_message)
                
                if success:
                    print("‚úÖ –£—Å–ø–µ—Ö: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    return self.send_json_response(200, {
                        "status": "success", 
                        "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram",
                        "chats_count": len(CHAT_IDS)
                    })
                else:
                    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram")
                    return self.send_json_response(500, {
                        "error": "Failed to send message to any chat",
                        "chats_tried": len(CHAT_IDS)
                    })
                    
            else:
                # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                return self.send_html_response("""
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Telegram Form Processor</title>
                    <meta charset="utf-8">
                </head>
                <body>
                    <h1>ü§ñ Telegram Form Processor</h1>
                    <p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /process_form?text=...</p>
                </body>
                </html>
                """)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ do_GET: {e}")
            return self.send_json_response(500, {"error": str(e)})
    
    def do_POST(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º"""
        try:
            print(f"üìç POST –∑–∞–ø—Ä–æ—Å: {self.path}")
            
            if self.path == '/process_form':
                content_length = int(self.headers.get('Content-Length', 0))
                print(f"üìè –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_length}")
                
                if content_length > 0:
                    body = self.rfile.read(content_length).decode('utf-8')
                    print(f"üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {body[:200]}...")
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
                    text = ""
                    if self.headers.get('Content-Type') == 'application/json':
                        try:
                            data = json.loads(body)
                            text = data.get('text', '')
                            print(f"üìã JSON —Ç–µ–∫—Å—Ç: {text}")
                        except:
                            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
                    else:
                        # –§–æ—Ä–º–∞—Ç form-data –∏–ª–∏ x-www-form-urlencoded
                        try:
                            data = parse_qs(body)
                            text = data.get('text', [''])[0]
                            if not text:
                                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                                text = list(data.values())[0][0] if data else ''
                            print(f"üìã Form —Ç–µ–∫—Å—Ç: {text}")
                        except:
                            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ form-data")
                else:
                    text = ''
                    print("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
                
                if not text:
                    print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ")
                    return self.send_json_response(400, {"error": "No text provided"})
                
                print(f"üì® –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {text[:100]}...")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                formatted_message = format_students_table(text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                success = send_to_telegram(formatted_message)
                
                if success:
                    print("üéâ –£–°–ü–ï–•: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
                    # –í–∞–∂–Ω–æ: –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º—ã –∂–¥—É—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                    return self.send_json_response(200, {
                        "status": "success",
                        "message": "–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"
                    })
                else:
                    print("üí• –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram")
                    return self.send_json_response(500, {
                        "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                    })
                    
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É—Ç—å: {self.path}")
                return self.send_error(404)
                
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ do_POST: {e}")
            return self.send_json_response(500, {"error": str(e)})
    
    def send_json_response(self, status_code, data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON –æ—Ç–≤–µ—Ç"""
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        response = json.dumps(data, ensure_ascii=False)
        self.wfile.write(response.encode())
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: {status_code} - {response}")
    
    def send_html_response(self, html_content):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML –æ—Ç–≤–µ—Ç"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(html_content.encode())
