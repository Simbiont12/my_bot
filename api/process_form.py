def format_students_table(text):
    students = []
    group = None
    
    print("=== –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï ===")
    print(repr(text))
    print("=======================")
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded —Ç–µ–∫—Å—Ç
        decoded_text = unquote(text)
        print(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {repr(decoded_text)}")
        
        # –£–±–∏—Ä–∞–µ–º "–ò—Ç–æ–≥–∏ –¥–Ω—è" –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        clean_text = decoded_text.replace('–ò—Ç–æ–≥–∏ –¥–Ω—è', '').replace('\u2028', '\n').replace('\\n', '\n')
        print(f"–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {repr(clean_text)}")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = clean_text.split('\n')
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É: {repr(line)}")
            
            # –ò—â–µ–º –≥—Ä—É–ø–ø—É (—Ñ–æ—Ä–º–∞—Ç: 1-–ò–ö–°–°11-10:)
            if not group and re.search(r'\d-–ò–ö–°–°\d{2}-\d{2}', line):
                group_match = re.search(r'(\d-–ò–ö–°–°\d{2}-\d{2})', line)
                if group_match:
                    group = group_match.group(1)
                    print(f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group}")
                continue
            
            # –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ": –°—Ç–∞—Ç—É—Å
            match = re.search(r'"([^"]+)"\s*:\s*([^\s]+)', line)
            if match:
                name, status = match.groups()
                name = name.strip()
                status = status.strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
                valid_statuses = ['–ë–æ–ª–µ–µ—Ç', '–ü—Ä–æ–≥—É–ª', '–ê–∫–∞–¥–µ–º', '–ò–ì', '–ó–∞—è–≤–ª–µ–Ω–∏–µ', '–ü—Ä–∏—à—ë–ª', '–ü—Ä–∏—à—ë–¥']
                if status not in valid_statuses:
                    status = "–ü—Ä–∏—à—ë–ª"  # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                students.append({"name": name, "status": status})
                print(f"–ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {name} - {status}")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: —Ç—Ä–∏ —Å–ª–æ–≤–∞ —Å –∑–∞–≥–ª–∞–≤–Ω—ã—Ö + —Å—Ç–∞—Ç—É—Å
            else:
                pattern = r'([–ê-–Ø–Å][–∞-—è—ë]+)\s+([–ê-–Ø–Å][–∞-—è—ë]+)\s+([–ê-–Ø–Å][–∞-—è—ë]+)\s+([–ê-–Ø–Å–∞-—è—ë]+)'
                match = re.search(pattern, line)
                if match:
                    last_name, first_name, middle_name, status = match.groups()
                    name = f"{last_name} {first_name} {middle_name}"
                    
                    valid_statuses = ['–ë–æ–ª–µ–µ—Ç', '–ü—Ä–æ–≥—É–ª', '–ê–∫–∞–¥–µ–º', '–ò–ì', '–ó–∞—è–≤–ª–µ–Ω–∏–µ', '–ü—Ä–∏—à—ë–ª', '–ü—Ä–∏—à—ë–¥']
                    if status not in valid_statuses:
                        status = "–ü—Ä–∏—à—ë–ª"
                    
                    students.append({"name": name, "status": status})
                    print(f"–ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç (–∞–ª—å—Ç): {name} - {status}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
    
    if not students:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã"
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∞–º–∏–ª–∏–∏
    students.sort(key=lambda x: x['name'])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = "üéì –û–¢–ß–ï–¢ –û –ü–û–°–ï–©–ê–ï–ú–û–°–¢–ò\n\n"
    
    if group:
        result += f"üè´ –ì—Ä—É–ø–ø–∞: {group}\n\n"
    
    for idx, student in enumerate(students, 1):
        status_icon = "‚úÖ" if student['status'] == '–ü—Ä–∏—à—ë–ª' else "‚ùå"
        result += f"{idx:2}. {student['name']} - {status_icon} {student['status']}\n"
    
    total = len(students)
    present = len([s for s in students if s['status'] == '–ü—Ä–∏—à—ë–ª'])
    absent = total - present
    
    result += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    result += f"‚Ä¢ –í—Å–µ–≥–æ: {total}\n"
    result += f"‚Ä¢ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {present}\n"
    result += f"‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {absent}\n"
    
    result += f"\nüïê {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    
    return result
